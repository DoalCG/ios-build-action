default_platform(:ios)

platform :ios do
  desc "Export ipa"
  lane :export_ipa do
    keychain_password = SecureRandom.uuid
    
    projectPath = ENV["PROJECT_PATH"]
    codeSignIdentity = ENV["CODE_SIGNING_IDENTITY"]
    provision_app_adhoc = ENV["provision-name-adhoc"]
    provision_app_store = ENV["provision-name-store"]
    provision_MoENotificationServiceExtension_adhoc = ENV["provision-name-MoENotificationServiceExtension-adhoc"]
    provision_MoENotificationServiceExtension_store = ENV["provision-name-MoENotificationServiceExtension-store"]
    provisionMoEPushTemplateExtension_adhoc = ENV["provision-name-MoEPushTemplateExtension-adhoc"]
    provisionMoEPushTemplateExtension_store = ENV["provision-name-MoEPushTemplateExtension-store"]

    create_keychain(
      name: "ios-build.keychain",
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: "ios-build-adhoc.p12",
      certificate_password: ENV["CERTIFICATE_PASSWORD"],
      keychain_name: "ios-build.keychain",
      keychain_password: keychain_password,
      log_output: true
    )
    
    if ENV["PODFILE_PATH"] != ""
      cocoapods(
        clean_install: true,
        podfile: ENV["PODFILE_PATH"]
      )
    end

    if ENV["EXPORT_METHOD"] == 'app-store'
      install_provisioning_profile(path: provision_app_store)
      install_provisioning_profile(path: provision_MoENotificationServiceExtension_store)
      install_provisioning_profile(path: provisionMoEPushTemplateExtension_store)      
    else
      install_provisioning_profile(path: provision_app_adhoc)
      install_provisioning_profile(path: provision_MoENotificationServiceExtension_adhoc)
      install_provisioning_profile(path: provisionMoEPushTemplateExtension_adhoc)
    end

    update_code_signing_settings(
      use_automatic_signing: false,
      path: projectPath,
      code_sign_identity: codeSignIdentity)

    if ENV["EXPORT_METHOD"] == 'app-store'
      update_project_provisioning(
        xcodeproj: projectPath,
        profile: provision_app_store,
        code_signing_identity: codeSignIdentity)

      update_project_provisioning(
        xcodeproj: projectPath,
        target_filter: ".*MoENotificationServiceExtension.*",
        profile: provision_MoENotificationServiceExtension_store,
        code_signing_identity: codeSignIdentity)

      update_project_provisioning(
        xcodeproj: projectPath,
        target_filter: ".*MoEPushTemplateExtension.*",
        profile: provisionMoEPushTemplateExtension_store,
        code_signing_identity: codeSignIdentity)
    
    else
      update_project_provisioning(
        xcodeproj: projectPath,
        profile: provision_app_adhoc,
        code_signing_identity: codeSignIdentity)

      update_project_provisioning(
        xcodeproj: projectPath,
        target_filter: ".*MoENotificationServiceExtension.*",
        profile: provision_MoENotificationServiceExtension_adhoc,
        code_signing_identity: codeSignIdentity)

      update_project_provisioning(
        xcodeproj: projectPath,
        target_filter: ".*MoEPushTemplateExtension.*",
        profile: provisionMoEPushTemplateExtension_adhoc,
        code_signing_identity: codeSignIdentity)
    end

    update_project_team(
      path: ENV["PROJECT_PATH"],
      teamid: ENV["TEAM_ID"]
    )
    
    if ENV["WORKSPACE_PATH"] != ""
      build_app(
        workspace: ENV["WORKSPACE_PATH"],
        configuration: ENV["CONFIGURATION"],
        scheme: ENV["SCHEME"],
        output_directory: ENV["OUTPUT_DIRECTORY"],
        output_name: ENV["OUTPUT_NAME"],
        clean: true,
        export_method: ENV["EXPORT_METHOD"],
        export_options: ENV["EXPORT_OPTIONS"],
        archive_path: ENV["ARCHIVE_PATH"]
      )
    else
      build_app(
        project: ENV["PROJECT_PATH"],
        configuration: ENV["CONFIGURATION"],
        scheme: ENV["SCHEME"],
        output_directory: ENV["OUTPUT_DIRECTORY"],
        output_name: ENV["OUTPUT_NAME"],
        clean: true,
        export_method: ENV["EXPORT_METHOD"],
        export_options: ENV["EXPORT_OPTIONS"],
        archive_path: ENV["ARCHIVE_PATH"]
      )
    end

    if ENV["UPLOAD_DSYM_TO_CRASHLYTICS"] == "true"
      upload_symbols_to_crashlytics(
        dsym_path: Actions.lane_context[ Actions::SharedValues::DSYM_OUTPUT_PATH],
        api_token:ENV["CRASHLYTICS_API_TOKEN"],
        gsp_path: ENV["CRASHLYTICS_GSP_PATH"],
        app_id: ENV["CRASHLYTICS_APP_ID"],
        platform: "ios",
        debug: ENV["CRASHLYTICS_DEBUG"],
      )
    end

    delete_keychain(
      name: "ios-build.keychain"
    )
  end
end